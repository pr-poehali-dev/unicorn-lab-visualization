import React, { useState, useRef } from 'react';
import { Button } from './ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import Icon from './ui/icon';
import { toast } from 'sonner';
import { Progress } from './ui/progress';

const TELEGRAM_PARSER_SCRIPT = `async function collectAllParticipants() {
  // ‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
  const CONFIG = {
    // –°–∫—Ä–æ–ª–ª
    scrollStepSize: 300,
    scrollDelay: 50,
    longPauseEvery: 100,
    longPauseDelay: 150,
    
    // –õ–∏–º–∏—Ç—ã
    maxSteps: 10000,
    maxNoNewCount: 1000,
    
    // –ß–∞—Ç
    chatId: '2599590153',       
    topicId: '1237',            
    
    // –ü–∞—Ä—Å–∏–Ω–≥
    searchTag: '#–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ',   
    
    // –ó–∞–¥–µ—Ä–∂–∫–∏
    initialDelay: 1000,         
  };
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  const participants = new Map();
  const messageList = document.querySelector('.MessageList.custom-scroll');
  const problematicMessages = [];
  const missedMessages = []; // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
  
  if (!messageList) {
    console.error('‚ùå MessageList –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }
  
  let processedMessageIds = new Set();
  let noNewMessagesCount = 0;
  
  function parseMessages() {
    let newCount = 0;
    const messages = Array.from(document.querySelectorAll('.Message'));
    
    messages.forEach(msg => {
      const messageId = msg.getAttribute('data-message-id');
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
      if (processedMessageIds.has(messageId)) return;
      
      const textContent = msg.querySelector('.text-content');
      if (!textContent) return;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–∞ (–†–ï–ì–ò–°–¢–†–û–ù–ï–ó–ê–í–ò–°–ò–ú–û)
      const text = textContent.innerText.trim();
      const lowerText = text.toLowerCase();
      const searchTagLower = CONFIG.searchTag.toLowerCase();
      
      if (!lowerText.includes(searchTagLower)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        const alternativeTags = ['#–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ', '#–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ', '#–ó–ù–ê–ö–û–ú–°–¢–í–û'];
        const hasTag = alternativeTags.some(tag => text.includes(tag));
        
        if (!hasTag) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ä–≤–∞—Ä–¥, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (msg.querySelector('.forward-title') && text.length > 100) {
            missedMessages.push({
              messageId,
              preview: text.substring(0, 50) + '...',
              hasForward: true
            });
          }
          return;
        }
      }
      
      let author, authorId, avatarUrl;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
      const isOwnMessage = msg.classList.contains('own');
      const isForwarded = msg.querySelector('.is-forwarded') || msg.querySelector('.forward-title');
      
      if (isOwnMessage) {
        // –î–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const nameMatch = text.match(/^([–ê-–Ø–Å–∞-—è—ë\\s]+),/);
        author = nameMatch ? nameMatch[1].trim() : '–Ø (—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)';
        authorId = \`self_\${messageId}\`;
        avatarUrl = null;
      } else if (isForwarded) {
        // –î–ª—è —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤
        const forwardAvatar = msg.querySelector('.forward-avatar');
        if (forwardAvatar) {
          authorId = forwardAvatar.getAttribute('data-peer-id');
          // –ë–µ—Ä–µ–º –∏–º—è –∏–∑ alt –∞—Ç—Ä–∏–±—É—Ç–∞ –∏–ª–∏ –∏–∑ sender-title
          const imgAlt = forwardAvatar.querySelector('img')?.alt;
          const senderTitle = msg.querySelector('.sender-title')?.innerText;
          author = imgAlt || senderTitle || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
          avatarUrl = forwardAvatar.querySelector('img')?.src;
          
          console.log(\`üìß –§–æ—Ä–≤–∞—Ä–¥ –æ—Ç: \${author} (\${authorId})\`);
        } else {
          console.log(\`‚ö†Ô∏è –§–æ—Ä–≤–∞—Ä–¥ –±–µ–∑ –∞–≤–∞—Ç–∞—Ä–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ \${messageId}\`);
        }
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const container = msg.closest('.sender-group-container');
        if (container) {
          const avatar = container.querySelector('.Avatar');
          authorId = avatar?.getAttribute('data-peer-id');
          author = avatar?.querySelector('img')?.alt || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
          avatarUrl = avatar?.querySelector('img')?.src;
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ authorId, —Å–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π
      if (!authorId) {
        authorId = \`unknown_\${messageId}\`;
        author = author || \`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä (msg: \${messageId})\`;
        
        problematicMessages.push({
          messageId,
          text: text.substring(0, 100) + '...',
          isForwarded,
          hasAvatar: !!msg.querySelector('.Avatar, .forward-avatar')
        });
        
        console.log(\`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω authorId –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è \${messageId}\`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–¥–ª—è unknown —Ä–∞–∑—Ä–µ—à–∞–µ–º)
      if (participants.has(authorId) && !authorId.startsWith('unknown_')) {
        return;
      }
      
      // –ß–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç
      const textClone = textContent.cloneNode(true);
      textClone.querySelector('.message-time')?.remove();
      textClone.querySelector('.Reactions')?.remove();
      textClone.querySelector('.message-signature')?.remove();
      textClone.querySelector('.MessageOutgoingStatus')?.remove();
      const cleanText = textClone.innerText.trim();
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
      if (author.includes('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')) {
        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã: "–ü—Ä–∏–≤–µ—Ç, —è –°–µ—Ä–≥–µ–π" –∏–ª–∏ "–°–µ—Ä–≥–µ–π –ü–µ—Ç—Ä–æ–≤,"
        const namePatterns = [
          /–ü—Ä–∏–≤–µ—Ç,?\\s*—è\\s+([–ê-–Ø–Å][–∞-—è—ë]+)/,
          /^([–ê-–Ø–Å][–∞-—è—ë]+\\s+[–ê-–Ø–Å][–∞-—è—ë]+),/,
          /–ú–µ–Ω—è –∑–æ–≤—É—Ç\\s+([–ê-–Ø–Å][–∞-—è—ë]+(?:\\s+[–ê-–Ø–Å][–∞-—è—ë]+)?)/
        ];
        
        for (const pattern of namePatterns) {
          const match = cleanText.match(pattern);
          if (match) {
            author = match[1];
            break;
          }
        }
      }
      
      participants.set(authorId, {
        author: author,
        authorId: authorId,
        avatarUrl: avatarUrl,
        messageLink: \`https://t.me/c/\${CONFIG.chatId}/\${CONFIG.topicId}/\${messageId}\`,
        text: cleanText,
        isForwarded: !!isForwarded,
        isOwn: !!isOwnMessage,
        isUnknown: authorId.startsWith('unknown_')
      });
      
      processedMessageIds.add(messageId);
      newCount++;
    });
    
    return newCount;
  }
  
  // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
  async function scrollStep() {
    const currentScroll = messageList.scrollTop;
    
    const newCount = parseMessages();
    
    if (newCount > 0) {
      console.log(\`‚úÖ +\${newCount} –Ω–æ–≤—ã—Ö ‚Üí –≤—Å–µ–≥–æ: \${participants.size}\`);
      noNewMessagesCount = 0;
    } else {
      noNewMessagesCount++;
    }
    
    if (currentScroll <= 0) {
      console.log('üìç –î–æ—Å—Ç–∏–≥–Ω—É—Ç –≤–µ—Ä—Ö —á–∞—Ç–∞');
      await new Promise(resolve => setTimeout(resolve, 1000));
      parseMessages();
      return false;
    }
    
    if (noNewMessagesCount > CONFIG.maxNoNewCount) {
      console.log(\`‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–∂–µ \${CONFIG.maxNoNewCount} —à–∞–≥–æ–≤\`);
      return false;
    }
    
    messageList.scrollTop = Math.max(0, currentScroll - CONFIG.scrollStepSize);
    await new Promise(resolve => setTimeout(resolve, CONFIG.scrollDelay));
    
    return true;
  }
  
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');
  console.log(\`üìã –ò—â–µ–º —Ç–µ–≥–∏: #–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ, #–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ, #–ó–ù–ê–ö–û–ú–°–¢–í–û\`);
  
  messageList.scrollTop = messageList.scrollHeight;
  await new Promise(resolve => setTimeout(resolve, CONFIG.initialDelay));
  
  parseMessages();
  
  let steps = 0;
  const startTime = Date.now();
  
  while (await scrollStep() && steps < CONFIG.maxSteps) {
    steps++;
    
    if (steps % CONFIG.longPauseEvery === 0) {
      const elapsed = Math.round((Date.now() - startTime) / 1000);
      console.log(\`üìä –®–∞–≥ \${steps} | \${participants.size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ | \${elapsed}—Å\`);
      await new Promise(resolve => setTimeout(resolve, CONFIG.longPauseDelay));
      parseMessages();
    }
  }
  
  console.log('üîÑ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥...');
  messageList.scrollTop = 0;
  await new Promise(resolve => setTimeout(resolve, 1000));
  parseMessages();
  
  const result = Array.from(participants.values());
  const elapsed = Math.round((Date.now() - startTime) / 1000);
  
  const jsonData = JSON.stringify(result, null, 2);
  const blob = new Blob([jsonData], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  
  const a = document.createElement('a');
  a.href = url;
  a.download = \`participants_\${CONFIG.searchTag.replace('#', '')}_\${new Date().toISOString().split('T')[0]}.json\`;
  a.click();
  
  console.log(\`\\n‚úÖ –ì–û–¢–û–í–û!\`);
  console.log(\`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\`);
  console.log(\`   - –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: \${result.length}\`);
  console.log(\`   - –í—Ä–µ–º–µ–Ω–∏: \${elapsed} —Å–µ–∫—É–Ω–¥\`);
  
  const forwarded = result.filter(p => p.isForwarded).length;
  const own = result.filter(p => p.isOwn).length;
  const unknown = result.filter(p => p.isUnknown).length;
  console.log(\`   - –û–±—ã—á–Ω—ã—Ö: \${result.length - forwarded - own - unknown}\`);
  console.log(\`   - –§–æ—Ä–≤–∞—Ä–¥–æ–≤: \${forwarded}\`);
  console.log(\`   - –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö: \${own}\`);
  console.log(\`   - –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö: \${unknown}\`);
  
  if (problematicMessages.length > 0) {
    console.log(\`\\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (\${problematicMessages.length}):\`);
    problematicMessages.slice(0, 3).forEach(m => {
      console.log(\`- ID: \${m.messageId}, —Ñ–æ—Ä–≤–∞—Ä–¥: \${m.isForwarded}, –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä: \${m.hasAvatar}\`);
    });
  }
  
  return result;
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å
collectAllParticipants();`;

const TelegramParser: React.FC = () => {
  const [showInstructions, setShowInstructions] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [uploadResult, setUploadResult] = useState<any>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const copyScript = async () => {
    try {
      await navigator.clipboard.writeText(TELEGRAM_PARSER_SCRIPT);
      toast.success('–°–∫—Ä–∏–ø—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    } catch (err) {
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç');
    }
  };

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (file.type !== 'application/json') {
      toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª');
      return;
    }

    try {
      setUploading(true);
      setUploadProgress(10);
      
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
      const text = await file.text();
      const participants = JSON.parse(text);
      
      if (!Array.isArray(participants)) {
        throw new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
      }
      
      setUploadProgress(20);
      toast.info(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –±–∞—Ç—á–∞—Ö –ø–æ 10 –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤
      const batchSize = 10;
      const totalBatches = Math.ceil(participants.length / batchSize);
      let totalImported = 0;
      let totalUpdated = 0;
      let totalConnections = 0;
      const allClusters: Record<string, number> = {};
      
      for (let i = 0; i < participants.length; i += batchSize) {
        const batch = participants.slice(i, i + batchSize);
        const currentBatch = Math.floor(i / batchSize) + 1;
        const progress = 20 + ((currentBatch / totalBatches) * 70);
        
        setUploadProgress(progress);
        toast.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Ç–∏–∏ ${currentBatch}/${totalBatches} (${batch.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)...`);
        
        try {
          const response = await fetch('https://functions.poehali.dev/66267fe8-bc76-4f15-a55a-a89fd93c694c', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ participants: batch })
          });
          
          if (!response.ok) {
            const errorText = await response.text();
            console.error(`–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Ç–∏–∏ ${currentBatch}:`, errorText);
            toast.error(`–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Ç–∏–∏ ${currentBatch}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...`);
            continue;
          }
          
          const result = await response.json();
          totalImported += result.imported || 0;
          totalUpdated += result.updated || 0;
          totalConnections += result.connections_created || 0;
          
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
          if (result.clusters) {
            Object.entries(result.clusters).forEach(([cluster, count]) => {
              allClusters[cluster] = (allClusters[cluster] || 0) + (count as number);
            });
          }
          
        } catch (batchError) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä—Ç–∏–∏ ${currentBatch}:`, batchError);
          toast.error(`–ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è ${currentBatch} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏`);
        }
      }
      
      setUploadProgress(100);
      setUploadResult({
        imported: totalImported,
        updated: totalUpdated,
        total: participants.length,
        connections_created: totalConnections,
        clusters: allClusters
      });
      
      toast.success(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${totalImported}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${totalUpdated}`);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        window.location.reload();
      }, 2000);
      
    } catch (error) {
      console.error('Upload error:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ' + (error as Error).message);
    } finally {
      setUploading(false);
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };

  return (
    <Card className="mt-8">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Icon name="MessageSquare" size={24} />
          –ü–∞—Ä—Å–µ—Ä Telegram
        </CardTitle>
        <CardDescription>
          –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ Telegram —á–∞—Ç–∞
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex gap-2 flex-wrap">
          <Button onClick={copyScript} variant="default">
            <Icon name="Copy" size={16} className="mr-2" />
            –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç
          </Button>
          <Button 
            onClick={() => setShowInstructions(!showInstructions)} 
            variant="outline"
          >
            <Icon name={showInstructions ? "ChevronUp" : "ChevronDown"} size={16} className="mr-2" />
            {showInstructions ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
          </Button>
          
          <div className="flex items-center gap-2 ml-auto">
            <input
              ref={fileInputRef}
              type="file"
              accept=".json"
              onChange={handleFileUpload}
              className="hidden"
              id="json-upload"
            />
            <label htmlFor="json-upload">
              <Button 
                variant="outline" 
                disabled={uploading}
                className="cursor-pointer"
                asChild
              >
                <span>
                  <Icon name={uploading ? "Loader2" : "Upload"} size={16} className={uploading ? "mr-2 animate-spin" : "mr-2"} />
                  {uploading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON'}
                </span>
              </Button>
            </label>
          </div>
        </div>

        {uploading && (
          <div className="space-y-2">
            <Progress value={uploadProgress} className="h-2" />
            <p className="text-sm text-muted-foreground">
              {uploadProgress < 30 && '–ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª...'}
              {uploadProgress >= 30 && uploadProgress < 70 && '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é AI...'}
              {uploadProgress >= 70 && uploadProgress < 100 && '–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...'}
              {uploadProgress === 100 && '–ì–æ—Ç–æ–≤–æ!'}
            </p>
          </div>
        )}

        {uploadResult && (
          <div className="bg-muted p-4 rounded-lg">
            <h4 className="font-semibold mb-2">‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:</h4>
            <div className="grid grid-cols-2 gap-2 text-sm">
              <div>–ù–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <span className="font-semibold">{uploadResult.imported}</span></div>
              <div>–û–±–Ω–æ–≤–ª–µ–Ω–æ: <span className="font-semibold">{uploadResult.updated}</span></div>
              <div>–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <span className="font-semibold">{uploadResult.total}</span></div>
              <div>–°–æ–∑–¥–∞–Ω–æ —Å–≤—è–∑–µ–π: <span className="font-semibold">{uploadResult.connections_created}</span></div>
            </div>
            {uploadResult.clusters && (
              <div className="mt-3">
                <p className="text-sm font-medium mb-1">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º:</p>
                <div className="flex flex-wrap gap-2">
                  {Object.entries(uploadResult.clusters).map(([cluster, count]) => (
                    <span key={cluster} className="text-xs bg-background px-2 py-1 rounded">
                      {cluster}: {count as number}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {showInstructions && (
          <div className="space-y-4 text-sm">
            <div className="bg-muted p-4 rounded-lg">
              <h4 className="font-semibold mb-2">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</h4>
              <ol className="list-decimal list-inside space-y-2">
                <li>–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–≤–µ—Ä—Å–∏—é Telegram: <a href="https://web.telegram.org" target="_blank" rel="noopener noreferrer" className="text-primary underline">web.telegram.org</a></li>
                <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏ —Ç–æ–ø–∏–∫</li>
                <li>–û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12 ‚Üí Console)</li>
                <li>–í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ Enter</li>
                <li>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–±–æ—Ä–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–æ–ª–ª)</li>
                <li>JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∫–∞—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
              </ol>
            </div>

            <div className="bg-muted p-4 rounded-lg">
              <h4 className="font-semibold mb-2">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–∫—Ä–∏–ø—Ç–µ:</h4>
              <ul className="space-y-1">
                <li><code className="bg-background px-1 rounded">chatId</code> - ID —á–∞—Ç–∞ (–∏–∑ URL)</li>
                <li><code className="bg-background px-1 rounded">topicId</code> - ID —Ç–æ–ø–∏–∫–∞</li>
                <li><code className="bg-background px-1 rounded">searchTag</code> - —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ (#–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ)</li>
                <li><code className="bg-background px-1 rounded">scrollDelay</code> - –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ (–º—Å)</li>
                <li><code className="bg-background px-1 rounded">maxSteps</code> - –º–∞–∫—Å–∏–º—É–º —à–∞–≥–æ–≤ —Å–∫—Ä–æ–ª–ª–∞</li>
              </ul>
            </div>

            <div className="bg-muted p-4 rounded-lg">
              <h4 className="font-semibold mb-2">üìä –ß—Ç–æ —Å–æ–±–∏—Ä–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç:</h4>
              <ul className="list-disc list-inside space-y-1">
                <li>–ò–º—è –∞–≤—Ç–æ—Ä–∞</li>
                <li>ID –∞–≤—Ç–æ—Ä–∞ –≤ Telegram</li>
                <li>–°—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</li>
                <li>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</li>
                <li>URL –∞–≤–∞—Ç–∞—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)</li>
                <li>–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ–µ/—Ñ–æ—Ä–≤–∞—Ä–¥/—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ)</li>
              </ul>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default TelegramParser;