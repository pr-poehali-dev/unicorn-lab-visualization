import { SimulationNode } from './types';
import { GraphEdge } from '@/types/entrepreneur';

interface GraphRendererProps {
  ctx: CanvasRenderingContext2D;
  dimensions: { width: number; height: number };
  simNodes: SimulationNode[];
  edges: GraphEdge[];
  selectedCluster?: string | null;
  clusterColors: Record<string, string>;
  hoveredNode: string | null;
  draggedNode: SimulationNode | null;
  simulationRef: React.RefObject<any>;
}

export class GraphRenderer {
  static drawGrid(ctx: CanvasRenderingContext2D, dimensions: { width: number; height: number }) {
    ctx.strokeStyle = 'rgba(255, 255, 255, 0.03)';
    ctx.lineWidth = 1;
    for (let x = 0; x < dimensions.width; x += 50) {
      ctx.beginPath();
      ctx.moveTo(x, 0);
      ctx.lineTo(x, dimensions.height);
      ctx.stroke();
    }
    for (let y = 0; y < dimensions.height; y += 50) {
      ctx.beginPath();
      ctx.moveTo(0, y);
      ctx.lineTo(dimensions.width, y);
      ctx.stroke();
    }
  }

  static drawEdges(props: GraphRendererProps) {
    const { ctx, simNodes, edges, selectedCluster, simulationRef } = props;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —É–∑–ª—ã, —Ç–∞–∫ –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞
    const visibleNodes = simNodes;
    const visibleNodeIds = new Set(visibleNodes.map(n => n.id));

    // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∏ –∏–∑ —Å–∏–º—É–ª—è—Ü–∏–∏
    const links = simulationRef.current?.force('link');
    if (links) {
      const simLinks = (links as any).links();
      
      // –†–∏—Å–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–µ–π
      simLinks.forEach((link: any) => {
        const sourceId = typeof link.source === 'object' ? link.source.id : link.source;
        const targetId = typeof link.target === 'object' ? link.target.id : link.target;
        
        if (!visibleNodeIds.has(sourceId) || !visibleNodeIds.has(targetId)) return;
        
        const sourceNode = typeof link.source === 'object' ? link.source : simNodes.find(n => n.id === sourceId);
        const targetNode = typeof link.target === 'object' ? link.target : simNodes.find(n => n.id === targetId);
        
        if (sourceNode && targetNode) {
          // –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π edge –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞
          const originalEdge = edges.find(e => 
            (e.source === sourceId && e.target === targetId) ||
            (e.source === targetId && e.target === sourceId)
          );
          const weight = originalEdge?.weight || 0.5;
          
          // –ë–µ–ª—ã–π —Ü–≤–µ—Ç —Å –±–æ–ª—å—à–µ–π –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å—é –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
          const opacity = 0.4 + (weight * 0.4); // –æ—Ç 0.4 (—Å–ª–∞–±–∞—è) –¥–æ 0.8 (—Å–∏–ª—å–Ω–∞—è)
          
          ctx.strokeStyle = `rgba(255, 255, 255, ${opacity})`;
          ctx.lineWidth = 1.5 + (weight * 3); // –æ—Ç 1.5 –¥–æ 4.5px
          ctx.beginPath();
          ctx.moveTo(sourceNode.x, sourceNode.y);
          ctx.lineTo(targetNode.x, targetNode.y);
          ctx.stroke();
        }
      });
    }
  }

  static drawNode(ctx: CanvasRenderingContext2D, node: SimulationNode, props: {
    isHovered: boolean;
    isDragged: boolean;
    clusterColors: Record<string, string>;
  }) {
    const { isHovered, isDragged, clusterColors } = props;
    const nodeSize = 40; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–∏—è

    // –°–≤–µ—á–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–∑–ª–∞
    if (isHovered || isDragged) {
      const glow = ctx.createRadialGradient(node.x, node.y, 0, node.x, node.y, nodeSize * 2.5);
      const color = clusterColors[node.data.cluster] || '#ea580c';
      glow.addColorStop(0, color + '40');
      glow.addColorStop(0.5, color + '20');
      glow.addColorStop(1, 'transparent');
      ctx.fillStyle = glow;
      ctx.beginPath();
      ctx.arc(node.x, node.y, nodeSize * 2.5, 0, Math.PI * 2);
      ctx.fill();
    }

    // –¢–µ–Ω—å –¥–ª—è —É–∑–ª–∞
    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';
    ctx.shadowBlur = 10;
    ctx.shadowOffsetX = 2;
    ctx.shadowOffsetY = 2;

    // –§–æ–Ω –¥–ª—è —É–∑–ª–∞ —Å —Ü–≤–µ—Ç–æ–º –∫–ª–∞—Å—Ç–µ—Ä–∞
    const bgGradient = ctx.createRadialGradient(node.x, node.y, 0, node.x, node.y, nodeSize);
    const color = clusterColors[node.data.cluster] || '#ea580c';
    bgGradient.addColorStop(0, color);
    bgGradient.addColorStop(1, color + '88');
    
    ctx.fillStyle = bgGradient;
    ctx.beginPath();
    ctx.arc(node.x, node.y, nodeSize + 2, 0, Math.PI * 2);
    ctx.fill();

    // –°–±—Ä–æ—Å —Ç–µ–Ω–∏
    ctx.shadowColor = 'transparent';
    ctx.shadowBlur = 0;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;

    // –¢–µ–º–Ω—ã–π –∫—Ä—É–≥ –¥–ª—è —Ñ–æ–Ω–∞ —ç–º–æ–¥–∑–∏
    ctx.fillStyle = '#1a1a1a';
    ctx.beginPath();
    ctx.arc(node.x, node.y, nodeSize, 0, Math.PI * 2);
    ctx.fill();

    // –†–∏—Å—É–µ–º —ç–º–æ–¥–∑–∏
    const emoji = node.data.emoji || node.data.avatar || 'üòä';
    
    // –†–∏—Å—É–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç
    ctx.save();
    ctx.font = `${nodeSize * 0.7}px Arial, sans-serif`;
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillStyle = '#ffffff';
    ctx.fillText(emoji, node.x, node.y);
    ctx.restore();

    // –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    ctx.fillStyle = '#ffffff';
    ctx.font = isHovered || isDragged ? 'bold 14px Inter' : '12px Inter';
    ctx.textAlign = 'center';
    ctx.fillText(node.data.name, node.x, node.y + nodeSize + 20);

    // –¢–æ–ø-3 —Ç–µ–≥–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    if ((isHovered || isDragged) && node.data.tags.length > 0) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      ctx.save();
      
      const topTags = node.data.tags.slice(0, 3);
      
      topTags.forEach((tag, index) => {
        const tagY = node.y + nodeSize + 35 + (index * 22);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–¥–∏–Ω—ã–π —à—Ä–∏—Ñ—Ç –∫–∞–∫ —É –∏–º–µ–Ω–∏
        ctx.font = '12px Inter';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        
        const metrics = ctx.measureText(tag);
        const padding = 8;
        const clusterColor = clusterColors[node.data.cluster] || '#ea580c';
        
        // –¢–µ–º–Ω—ã–π —Ñ–æ–Ω —Å —Ö–æ—Ä–æ—à–µ–π –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
        ctx.fillStyle = 'rgba(26, 26, 26, 0.95)';
        ctx.beginPath();
        ctx.roundRect(
          node.x - metrics.width / 2 - padding, 
          tagY - 10,
          metrics.width + padding * 2,
          20,
          6
        );
        ctx.fill();
        
        // –û–±–≤–æ–¥–∫–∞ —Ü–≤–µ—Ç–æ–º –∫–ª–∞—Å—Ç–µ—Ä–∞
        ctx.strokeStyle = clusterColor;
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.roundRect(
          node.x - metrics.width / 2 - padding, 
          tagY - 10,
          metrics.width + padding * 2,
          20,
          6
        );
        ctx.stroke();
        
        // –¢–µ–∫—Å—Ç —Ç–µ–≥–∞ - —è–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç
        ctx.fillStyle = '#ffffff';
        ctx.strokeStyle = 'transparent';
        ctx.lineWidth = 0;
        ctx.fillText(tag, node.x, tagY);
      });
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      ctx.restore();
    }
  }

  static draw(props: GraphRendererProps) {
    const { ctx, dimensions, simNodes, selectedCluster, hoveredNode, draggedNode, clusterColors } = props;

    // Clear canvas - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã, –Ω–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ
    ctx.fillStyle = '#0a0a0a';
    ctx.fillRect(0, 0, dimensions.width, dimensions.height);

    // –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É
    this.drawGrid(ctx, dimensions);

    // –†–∏—Å—É–µ–º —Å–≤—è–∑–∏
    this.drawEdges(props);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —É–∑–ª—ã, —Ç–∞–∫ –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    const visibleNodes = simNodes;

    // –†–∏—Å—É–µ–º —É–∑–ª—ã
    visibleNodes.forEach(node => {
      this.drawNode(ctx, node, {
        isHovered: node.id === hoveredNode,
        isDragged: draggedNode?.id === node.id,
        clusterColors
      });
    });
  }
}