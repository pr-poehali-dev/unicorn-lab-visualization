import { SimulationNode } from './types';
import { GraphEdge } from '@/types/entrepreneur';

interface GraphRendererProps {
  ctx: CanvasRenderingContext2D;
  dimensions: { width: number; height: number };
  simNodes: SimulationNode[];
  edges: GraphEdge[];
  selectedCluster?: string | null;
  clusterColors: Record<string, string>;
  hoveredNode: string | null;
  draggedNode: SimulationNode | null;
  simulationRef: React.RefObject<any>;
}

export class GraphRenderer {
  private static isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  private static nodeCache = new Map<string, ImageData>();
  private static lastFrameTime = 0;
  private static frameCount = 0;
  
  static drawGrid(ctx: CanvasRenderingContext2D, dimensions: { width: number; height: number }) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ç–∫—É –≤ Safari –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (this.isSafari) return;
    
    ctx.strokeStyle = 'rgba(255, 255, 255, 0.03)';
    ctx.lineWidth = 1;
    for (let x = 0; x < dimensions.width; x += 50) {
      ctx.beginPath();
      ctx.moveTo(x, 0);
      ctx.lineTo(x, dimensions.height);
      ctx.stroke();
    }
    for (let y = 0; y < dimensions.height; y += 50) {
      ctx.beginPath();
      ctx.moveTo(0, y);
      ctx.lineTo(dimensions.width, y);
      ctx.stroke();
    }
  }

  static drawEdges(props: GraphRendererProps) {
    const { ctx, simNodes, edges, selectedCluster, simulationRef } = props;
    
    const visibleNodes = selectedCluster && selectedCluster !== '–í—Å–µ'
      ? simNodes.filter(n => n.data.cluster === selectedCluster)
      : simNodes;

    const visibleNodeIds = new Set(visibleNodes.map(n => n.id));

    // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∏ –∏–∑ —Å–∏–º—É–ª—è—Ü–∏–∏
    const links = simulationRef.current?.force('link');
    if (links) {
      const simLinks = (links as any).links();
      
      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Safari: —Ä–∏—Å—É–µ–º –≤—Å–µ –ª–∏–Ω–∏–∏ –æ–¥–Ω–∏–º path
      if (this.isSafari && simNodes.length > 50) {
        ctx.beginPath();
        ctx.strokeStyle = 'rgba(255, 255, 255, 0.08)';
        ctx.lineWidth = 1;
        
        simLinks.forEach((link: any) => {
          const sourceId = typeof link.source === 'object' ? link.source.id : link.source;
          const targetId = typeof link.target === 'object' ? link.target.id : link.target;
          
          if (!visibleNodeIds.has(sourceId) || !visibleNodeIds.has(targetId)) return;
          
          const sourceNode = typeof link.source === 'object' ? link.source : simNodes.find(n => n.id === sourceId);
          const targetNode = typeof link.target === 'object' ? link.target : simNodes.find(n => n.id === targetId);
          
          if (sourceNode && targetNode) {
            ctx.moveTo(sourceNode.x, sourceNode.y);
            ctx.lineTo(targetNode.x, targetNode.y);
          }
        });
        
        ctx.stroke();
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
        simLinks.forEach((link: any) => {
          const sourceId = typeof link.source === 'object' ? link.source.id : link.source;
          const targetId = typeof link.target === 'object' ? link.target.id : link.target;
          
          if (!visibleNodeIds.has(sourceId) || !visibleNodeIds.has(targetId)) return;
          
          const sourceNode = typeof link.source === 'object' ? link.source : simNodes.find(n => n.id === sourceId);
          const targetNode = typeof link.target === 'object' ? link.target : simNodes.find(n => n.id === targetId);
          
          if (sourceNode && targetNode) {
            // –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π edge –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞
            const originalEdge = edges.find(e => 
              (e.source === sourceId && e.target === targetId) ||
              (e.source === targetId && e.target === sourceId)
            );
            const weight = originalEdge?.weight || 0.5;
            
            // –ë–µ–ª—ã–π —Ü–≤–µ—Ç —Å –±–æ–ª—å—à–µ–π –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å—é –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            const opacity = 0.4 + (weight * 0.4); // –æ—Ç 0.4 (—Å–ª–∞–±–∞—è) –¥–æ 0.8 (—Å–∏–ª—å–Ω–∞—è)
            
            ctx.strokeStyle = `rgba(255, 255, 255, ${opacity})`;
            ctx.lineWidth = 1.5 + (weight * 3); // –æ—Ç 1.5 –¥–æ 4.5px
            ctx.beginPath();
            ctx.moveTo(sourceNode.x, sourceNode.y);
            ctx.lineTo(targetNode.x, targetNode.y);
            ctx.stroke();
          }
        });
      }
    }
  }

  static drawNode(ctx: CanvasRenderingContext2D, node: SimulationNode, props: {
    isHovered: boolean;
    isDragged: boolean;
    clusterColors: Record<string, string>;
    simplifiedRender?: boolean;
  }) {
    const { isHovered, isDragged, clusterColors, simplifiedRender } = props;
    const nodeSize = 40; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–∏—è

    // –°–≤–µ—á–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–∑–ª–∞ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä
    if (!simplifiedRender && (isHovered || isDragged)) {
      const glow = ctx.createRadialGradient(node.x, node.y, 0, node.x, node.y, nodeSize * 2.5);
      const color = clusterColors[node.data.cluster] || '#ea580c';
      glow.addColorStop(0, color + '40');
      glow.addColorStop(0.5, color + '20');
      glow.addColorStop(1, 'transparent');
      ctx.fillStyle = glow;
      ctx.beginPath();
      ctx.arc(node.x, node.y, nodeSize * 2.5, 0, Math.PI * 2);
      ctx.fill();
    }

    // –¢–µ–Ω—å –¥–ª—è —É–∑–ª–∞ - –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
    if (!simplifiedRender) {
      ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';
      ctx.shadowBlur = 10;
      ctx.shadowOffsetX = 2;
      ctx.shadowOffsetY = 2;
    }

    // –§–æ–Ω –¥–ª—è —É–∑–ª–∞ —Å —Ü–≤–µ—Ç–æ–º –∫–ª–∞—Å—Ç–µ—Ä–∞
    const bgGradient = ctx.createRadialGradient(node.x, node.y, 0, node.x, node.y, nodeSize);
    const color = clusterColors[node.data.cluster] || '#ea580c';
    bgGradient.addColorStop(0, color);
    bgGradient.addColorStop(1, color + '88');
    
    ctx.fillStyle = bgGradient;
    ctx.beginPath();
    ctx.arc(node.x, node.y, nodeSize + 2, 0, Math.PI * 2);
    ctx.fill();

    // –°–±—Ä–æ—Å —Ç–µ–Ω–∏
    ctx.shadowColor = 'transparent';
    ctx.shadowBlur = 0;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;

    // –¢–µ–º–Ω—ã–π –∫—Ä—É–≥ –¥–ª—è —Ñ–æ–Ω–∞ —ç–º–æ–¥–∑–∏
    ctx.fillStyle = '#1a1a1a';
    ctx.beginPath();
    ctx.arc(node.x, node.y, nodeSize, 0, Math.PI * 2);
    ctx.fill();

    // –†–∏—Å—É–µ–º —ç–º–æ–¥–∑–∏
    const emoji = node.data.emoji || node.data.avatar || 'üòä';
    
    // –†–∏—Å—É–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç
    ctx.save();
    ctx.font = `${nodeSize * 0.7}px Arial, sans-serif`;
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillStyle = '#ffffff';
    ctx.fillText(emoji, node.x, node.y);
    ctx.restore();

    // –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    ctx.fillStyle = '#ffffff';
    ctx.font = isHovered || isDragged ? 'bold 14px Inter' : '12px Inter';
    ctx.textAlign = 'center';
    ctx.fillText(node.data.name, node.x, node.y + nodeSize + 20);

    // –¢–æ–ø-3 —Ç–µ–≥–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ - –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
    if (!simplifiedRender && (isHovered || isDragged) && node.data.tags.length > 0) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      ctx.save();
      
      const topTags = node.data.tags.slice(0, 3);
      
      topTags.forEach((tag, index) => {
        const tagY = node.y + nodeSize + 35 + (index * 22);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–¥–∏–Ω—ã–π —à—Ä–∏—Ñ—Ç –∫–∞–∫ —É –∏–º–µ–Ω–∏
        ctx.font = '12px Inter';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        
        const metrics = ctx.measureText(tag);
        const padding = 8;
        const clusterColor = clusterColors[node.data.cluster] || '#ea580c';
        
        // –¢–µ–º–Ω—ã–π —Ñ–æ–Ω —Å —Ö–æ—Ä–æ—à–µ–π –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
        ctx.fillStyle = 'rgba(26, 26, 26, 0.95)';
        ctx.beginPath();
        ctx.roundRect(
          node.x - metrics.width / 2 - padding, 
          tagY - 10,
          metrics.width + padding * 2,
          20,
          6
        );
        ctx.fill();
        
        // –û–±–≤–æ–¥–∫–∞ —Ü–≤–µ—Ç–æ–º –∫–ª–∞—Å—Ç–µ—Ä–∞
        ctx.strokeStyle = clusterColor;
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.roundRect(
          node.x - metrics.width / 2 - padding, 
          tagY - 10,
          metrics.width + padding * 2,
          20,
          6
        );
        ctx.stroke();
        
        // –¢–µ–∫—Å—Ç —Ç–µ–≥–∞ - —è–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç
        ctx.fillStyle = '#ffffff';
        ctx.strokeStyle = 'transparent';
        ctx.lineWidth = 0;
        ctx.fillText(tag, node.x, tagY);
      });
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      ctx.restore();
    }
  }

  static draw(props: GraphRendererProps & { zoom: number; pan: { x: number; y: number } }) {
    const { ctx, dimensions, simNodes, selectedCluster, hoveredNode, draggedNode, clusterColors, zoom, pan } = props;

    // –£–¥–∞–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É FPS –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ DevTools

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
    ctx.save();

    // Clear canvas - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã
    ctx.fillStyle = '#0a0a0a';
    ctx.fillRect(0, 0, dimensions.width, dimensions.height);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    ctx.translate(pan.x, pan.y);
    ctx.scale(zoom, zoom);

    // –í Safari –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ç–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
    if (!this.isSafari) {
      this.drawGrid(ctx, dimensions);
    }

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–≤—è–∑–µ–π
    if (simNodes.length > 100) {
      // –î–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä–∞—Ñ–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
      this.drawEdgesOptimized(props);
    } else {
      this.drawEdges(props);
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∏–¥–∏–º—ã–µ —É–∑–ª—ã
    const visibleNodes = selectedCluster && selectedCluster !== '–í—Å–µ'
      ? simNodes.filter(n => n.data.cluster === selectedCluster)
      : simNodes;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –¥–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä–∞—Ñ–æ–≤
    const simplifiedRender = simNodes.length > 100;

    // Viewport culling –¥–ª—è –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –≥—Ä–∞—Ñ–∞—Ö
    const viewBounds = simNodes.length > 100 ? {
      left: -pan.x / zoom - 100,
      right: (dimensions.width - pan.x) / zoom + 100,
      top: -pan.y / zoom - 100,
      bottom: (dimensions.height - pan.y) / zoom + 100
    } : null;

    // –†–∏—Å—É–µ–º –Ω–æ–¥—ã
    visibleNodes.forEach(node => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ –Ω–æ–¥—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä–∞—Ñ–æ–≤
      if (viewBounds && (
        node.x < viewBounds.left || node.x > viewBounds.right ||
        node.y < viewBounds.top || node.y > viewBounds.bottom
      )) {
        return;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä–∞—Ñ–æ–≤
      if (simNodes.length > 100) {
        this.drawNodeOptimized(ctx, node, {
          isHovered: node.id === hoveredNode,
          isDragged: draggedNode?.id === node.id,
          clusterColors,
          simplifiedRender
        });
      } else {
        this.drawNode(ctx, node, {
          isHovered: node.id === hoveredNode,
          isDragged: draggedNode?.id === node.id,
          clusterColors,
          simplifiedRender
        });
      }
    });

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    ctx.restore();
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–≤—è–∑–µ–π –¥–ª—è Safari
  static drawEdgesOptimized(props: GraphRendererProps) {
    const { ctx, simNodes, simulationRef } = props;
    
    const links = simulationRef.current?.force('link');
    if (!links) return;
    
    const simLinks = (links as any).links();
    
    // –†–∏—Å—É–µ–º –≤—Å–µ –ª–∏–Ω–∏–∏ –æ–¥–Ω–∏–º path –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    ctx.beginPath();
    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)'; // –ù–µ–º–Ω–æ–≥–æ –±–æ–ª–µ–µ –≤–∏–¥–∏–º—ã–µ –ª–∏–Ω–∏–∏
    ctx.lineWidth = 1; // –ß—É—Ç—å —Ç–æ–ª—â–µ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
    
    // –†–∏—Å—É–µ–º –≤—Å–µ —Å–≤—è–∑–∏, –Ω–æ –æ–¥–Ω–∏–º –ø—Ä–æ—Ö–æ–¥–æ–º
    simLinks.forEach((link: any) => {
      const sourceNode = link.source;
      const targetNode = link.target;
      
      if (sourceNode && targetNode) {
        ctx.moveTo(sourceNode.x, sourceNode.y);
        ctx.lineTo(targetNode.x, targetNode.y);
      }
    });
    
    ctx.stroke();
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–æ–¥ –¥–ª—è Safari
  static drawNodeOptimized(ctx: CanvasRenderingContext2D, node: SimulationNode, props: {
    isHovered: boolean;
    isDragged: boolean;
    clusterColors: Record<string, string>;
    simplifiedRender?: boolean;
  }) {
    const { isHovered, isDragged, clusterColors } = props;
    const nodeSize = 40;
    const color = clusterColors[node.data.cluster] || '#ea580c';

    if (!isHovered && !isDragged) {
      // –°—É–ø–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –Ω–æ–¥
      
      // –¶–≤–µ—Ç–Ω–æ–π –∫—Ä—É–≥-–æ–±–≤–æ–¥–∫–∞
      ctx.fillStyle = color;
      ctx.beginPath();
      ctx.arc(node.x, node.y, nodeSize + 2, 0, Math.PI * 2);
      ctx.fill();
      
      // –¢–µ–º–Ω—ã–π –∫—Ä—É–≥ –≤–Ω—É—Ç—Ä–∏
      ctx.fillStyle = '#1a1a1a';
      ctx.beginPath();
      ctx.arc(node.x, node.y, nodeSize, 0, Math.PI * 2);
      ctx.fill();

      // –≠–º–æ–¥–∑–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞
      ctx.fillStyle = '#ffffff';
      ctx.font = `${nodeSize * 0.7}px Arial`;
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillText(node.data.emoji || 'üòä', node.x, node.y);

      // –ò–º—è —Ä–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏
      const zoom = ctx.getTransform().a;
      if (zoom > 0.6) {
        ctx.font = '12px Inter';
        ctx.fillText(node.data.name, node.x, node.y + nodeSize + 20);
      }
    } else {
      // –î–ª—è hover/drag –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
      this.drawNode(ctx, node, props);
    }
  }
}