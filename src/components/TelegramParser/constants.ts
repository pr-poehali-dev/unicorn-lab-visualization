export const TELEGRAM_PARSER_SCRIPT = `async function collectAllParticipants() {
  // ‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
  const CONFIG = {
    // –°–∫—Ä–æ–ª–ª
    scrollStepSize: 300,
    scrollDelay: 50,
    longPauseEvery: 100,
    longPauseDelay: 150,
    
    // –õ–∏–º–∏—Ç—ã
    maxSteps: 10000,
    maxNoNewCount: 1000,
    
    // –ß–∞—Ç
    chatId: '2599590153',       
    topicId: '1237',            
    
    // –ü–∞—Ä—Å–∏–Ω–≥
    searchTag: '#–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ',   
    
    // –ó–∞–¥–µ—Ä–∂–∫–∏
    initialDelay: 1000,         
  };
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  const participants = new Map();
  const messageList = document.querySelector('.MessageList.custom-scroll');
  const problematicMessages = [];
  const missedMessages = []; // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
  
  if (!messageList) {
    console.error('‚ùå MessageList –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }
  
  let processedMessageIds = new Set();
  let noNewMessagesCount = 0;
  
  function parseMessages() {
    let newCount = 0;
    const messages = Array.from(document.querySelectorAll('.Message'));
    
    messages.forEach(msg => {
      const messageId = msg.getAttribute('data-message-id');
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
      if (processedMessageIds.has(messageId)) return;
      
      const textContent = msg.querySelector('.text-content');
      if (!textContent) return;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–∞ (–†–ï–ì–ò–°–¢–†–û–ù–ï–ó–ê–í–ò–°–ò–ú–û)
      const text = textContent.innerText.trim();
      const lowerText = text.toLowerCase();
      const searchTagLower = CONFIG.searchTag.toLowerCase();
      
      if (!lowerText.includes(searchTagLower)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        const alternativeTags = ['#–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ', '#–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ', '#–ó–ù–ê–ö–û–ú–°–¢–í–û'];
        const hasTag = alternativeTags.some(tag => text.includes(tag));
        
        if (!hasTag) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ä–≤–∞—Ä–¥, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (msg.querySelector('.forward-title') && text.length > 100) {
            missedMessages.push({
              messageId,
              preview: text.substring(0, 50) + '...',
              hasForward: true
            });
          }
          return;
        }
      }
      
      let author, authorId, avatarUrl;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
      const isOwnMessage = msg.classList.contains('own');
      const isForwarded = msg.querySelector('.is-forwarded') || msg.querySelector('.forward-title');
      
      if (isOwnMessage) {
        // –î–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const nameMatch = text.match(/^([–ê-–Ø–Å–∞-—è—ë\\s]+),/);
        author = nameMatch ? nameMatch[1].trim() : '–Ø (—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)';
        authorId = \`self_\${messageId}\`;
        avatarUrl = null;
      } else if (isForwarded) {
        // –î–ª—è —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤
        const forwardAvatar = msg.querySelector('.forward-avatar');
        if (forwardAvatar) {
          authorId = forwardAvatar.getAttribute('data-peer-id');
          // –ë–µ—Ä–µ–º –∏–º—è –∏–∑ alt –∞—Ç—Ä–∏–±—É—Ç–∞ –∏–ª–∏ –∏–∑ sender-title
          const imgAlt = forwardAvatar.querySelector('img')?.alt;
          const senderTitle = msg.querySelector('.sender-title')?.innerText;
          author = imgAlt || senderTitle || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
          avatarUrl = forwardAvatar.querySelector('img')?.src;
          
          console.log(\`üìß –§–æ—Ä–≤–∞—Ä–¥ –æ—Ç: \${author} (\${authorId})\`);
        } else {
          console.log(\`‚ö†Ô∏è –§–æ—Ä–≤–∞—Ä–¥ –±–µ–∑ –∞–≤–∞—Ç–∞—Ä–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ \${messageId}\`);
        }
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const container = msg.closest('.sender-group-container');
        if (container) {
          const avatar = container.querySelector('.Avatar');
          authorId = avatar?.getAttribute('data-peer-id');
          author = avatar?.querySelector('img')?.alt || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
          avatarUrl = avatar?.querySelector('img')?.src;
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ authorId, —Å–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π
      if (!authorId) {
        authorId = \`unknown_\${messageId}\`;
        author = author || \`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä (msg: \${messageId})\`;
        
        problematicMessages.push({
          messageId,
          text: text.substring(0, 100) + '...',
          isForwarded,
          hasAvatar: !!msg.querySelector('.Avatar, .forward-avatar')
        });
        
        console.log(\`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω authorId –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è \${messageId}\`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–¥–ª—è unknown —Ä–∞–∑—Ä–µ—à–∞–µ–º)
      if (participants.has(authorId) && !authorId.startsWith('unknown_')) {
        return;
      }
      
      // –ß–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç
      const textClone = textContent.cloneNode(true);
      textClone.querySelector('.message-time')?.remove();
      textClone.querySelector('.Reactions')?.remove();
      textClone.querySelector('.message-signature')?.remove();
      textClone.querySelector('.MessageOutgoingStatus')?.remove();
      const cleanText = textClone.innerText.trim();
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
      if (author.includes('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')) {
        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã: "–ü—Ä–∏–≤–µ—Ç, —è –°–µ—Ä–≥–µ–π" –∏–ª–∏ "–°–µ—Ä–≥–µ–π –ü–µ—Ç—Ä–æ–≤,"
        const namePatterns = [
          /–ü—Ä–∏–≤–µ—Ç,?\\s*—è\\s+([–ê-–Ø–Å][–∞-—è—ë]+)/,
          /^([–ê-–Ø–Å][–∞-—è—ë]+\\s+[–ê-–Ø–Å][–∞-—è—ë]+),/,
          /–ú–µ–Ω—è –∑–æ–≤—É—Ç\\s+([–ê-–Ø–Å][–∞-—è—ë]+(?:\\s+[–ê-–Ø–Å][–∞-—è—ë]+)?)/
        ];
        
        for (const pattern of namePatterns) {
          const match = cleanText.match(pattern);
          if (match) {
            author = match[1];
            break;
          }
        }
      }
      
      participants.set(authorId, {
        author: author,
        authorId: authorId,
        avatarUrl: avatarUrl,
        messageLink: \`https://t.me/c/\${CONFIG.chatId}/\${CONFIG.topicId}/\${messageId}\`,
        text: cleanText,
        isForwarded: !!isForwarded,
        isOwn: !!isOwnMessage,
        isUnknown: authorId.startsWith('unknown_')
      });
      
      processedMessageIds.add(messageId);
      newCount++;
    });
    
    return newCount;
  }
  
  // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
  async function scrollStep() {
    const currentScroll = messageList.scrollTop;
    
    const newCount = parseMessages();
    
    if (newCount > 0) {
      console.log(\`‚úÖ +\${newCount} –Ω–æ–≤—ã—Ö ‚Üí –≤—Å–µ–≥–æ: \${participants.size}\`);
      noNewMessagesCount = 0;
    } else {
      noNewMessagesCount++;
    }
    
    if (currentScroll <= 0) {
      console.log('üìç –î–æ—Å—Ç–∏–≥–Ω—É—Ç –≤–µ—Ä—Ö —á–∞—Ç–∞');
      await new Promise(resolve => setTimeout(resolve, 1000));
      parseMessages();
      return false;
    }
    
    if (noNewMessagesCount > CONFIG.maxNoNewCount) {
      console.log(\`‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–∂–µ \${CONFIG.maxNoNewCount} —à–∞–≥–æ–≤\`);
      return false;
    }
    
    messageList.scrollTop = Math.max(0, currentScroll - CONFIG.scrollStepSize);
    await new Promise(resolve => setTimeout(resolve, CONFIG.scrollDelay));
    
    return true;
  }
  
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');
  console.log(\`üìã –ò—â–µ–º —Ç–µ–≥–∏: #–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ, #–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ, #–ó–ù–ê–ö–û–ú–°–¢–í–û\`);
  
  messageList.scrollTop = messageList.scrollHeight;
  await new Promise(resolve => setTimeout(resolve, CONFIG.initialDelay));
  
  parseMessages();
  
  let steps = 0;
  const startTime = Date.now();
  
  while (await scrollStep() && steps < CONFIG.maxSteps) {
    steps++;
    
    if (steps % CONFIG.longPauseEvery === 0) {
      const elapsed = Math.round((Date.now() - startTime) / 1000);
      console.log(\`üìä –®–∞–≥ \${steps} | \${participants.size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ | \${elapsed}—Å\`);
      await new Promise(resolve => setTimeout(resolve, CONFIG.longPauseDelay));
      parseMessages();
    }
  }
  
  console.log('üîÑ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥...');
  messageList.scrollTop = 0;
  await new Promise(resolve => setTimeout(resolve, 1000));
  parseMessages();
  
  const result = Array.from(participants.values());
  const elapsed = Math.round((Date.now() - startTime) / 1000);
  
  const jsonData = JSON.stringify(result, null, 2);
  const blob = new Blob([jsonData], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  
  const a = document.createElement('a');
  a.href = url;
  a.download = \`participants_\${CONFIG.searchTag.replace('#', '')}_\${new Date().toISOString().split('T')[0]}.json\`;
  a.click();
  
  console.log(\`\\n‚úÖ –ì–û–¢–û–í–û!\`);
  console.log(\`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\`);
  console.log(\`   - –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: \${result.length}\`);
  console.log(\`   - –í—Ä–µ–º–µ–Ω–∏: \${elapsed} —Å–µ–∫—É–Ω–¥\`);
  
  const forwarded = result.filter(p => p.isForwarded).length;
  const own = result.filter(p => p.isOwn).length;
  const unknown = result.filter(p => p.isUnknown).length;
  console.log(\`   - –û–±—ã—á–Ω—ã—Ö: \${result.length - forwarded - own - unknown}\`);
  console.log(\`   - –§–æ—Ä–≤–∞—Ä–¥–æ–≤: \${forwarded}\`);
  console.log(\`   - –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö: \${own}\`);
  console.log(\`   - –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö: \${unknown}\`);
  
  if (problematicMessages.length > 0) {
    console.log(\`\\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (\${problematicMessages.length}):\`);
    problematicMessages.slice(0, 3).forEach(m => {
      console.log(\`- ID: \${m.messageId}, —Ñ–æ—Ä–≤–∞—Ä–¥: \${m.isForwarded}, –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä: \${m.hasAvatar}\`);
    });
  }
  
  return result;
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å
collectAllParticipants();`;